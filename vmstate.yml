- name: Gets VM Prism Central from its description
  ansible.builtin.set_fact:
    vm_entitiespc: "{{ loginpe.json | json_query('entities[?description == `NutanixPrismCentral`]') }}"

- name: Show specific VM info on Prism Central
  ansible.builtin.debug:
    msg:
      - "PC Name: {{ vm_entitiespc[0].name }}"
      - "PC Desc: {{ vm_entitiespc[0].description }}"
      - "PC UUID: {{ vm_entitiespc[0].uuid }}"
      - "PC Power State: {{ vm_entitiespc[0].power_state }}"

- name: Set VM Prism Central uuid fact
  ansible.builtin.set_fact:
    pcuuid: "{{ vm_entitiespc[0].uuid }}"

- name: Power state Prism Central to "{{ transition_payload }}"
  block:
    - name: Set power state Prism Central to "{{ transition_payload }}"
      ansible.builtin.uri:
        url: "{{ api_url_v2 }}/{{ pcuuid }}/set_power_state"
        method: POST
        validate_certs: false
        body_format: json
        body: '{"transition": "{{ transition_payload }}"}'
        return_content: true
        user: "{{ prism_user }}"
        password: "{{ prism_password }}"
        force_basic_auth: true
        status_code: 201, 200
      register: setpowerstate
      when: vm_entitiespc[0].power_state == currentvmstate

    - name: Show debug status of task on power state
      ansible.builtin.debug:
        msg:
          - "{{ setpowerstate }}"
          - "{{ setpowerstate.json.task_uuid }}"
        verbosity: 2
      tags: never

    - name: Get status of task to set power state and confirm power state
      ansible.builtin.uri:
        url: "{{ api_url_v3 }}/{{ setpowerstate.json.task_uuid }}"
        method: GET
        validate_certs: false
        body_format: json
        return_content: true
        user: "{{ prism_user }}"
        password: "{{ prism_password }}"
        force_basic_auth: true
        status_code: 200
      register: getpowerstate
      when: vm_entitiespc[0].power_state == currentvmstate
      until: vmstatus in getpowerstate.json.progress_status
      retries: "{{ qretries }}"
      delay: "{{ qdelay }}"
      failed_when: getpowerstate.json.progress_status == "Failed" or getpowerstate.json.progress_status == "FAILED"
#      failed_when: getpowerstate.json.completed_tasks_info[0].progress_status != "Succeeded"

    - name: Show debug of power state task
      ansible.builtin.debug:
        msg:
          - "{{ getpowerstate }}"
          - "{{ getpowerstate.json }}"
#          - "{{ getpowerstate.json.completed_tasks_info }}"
#          - "{{ getpowerstate.json.completed_tasks_info[0].progress_status }}"
        verbosity: 2
      tags: never
